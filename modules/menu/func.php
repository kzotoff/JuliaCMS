<?php //> Й <- UTF mark/*menu generator*/require(__DIR__.'/html.php');class J_Menu extends JuliaCMSModule {		/**	 *	 */	function requestParser($template) {		$DB = Registry::Get('db');		// filter input		$input_filter = array(			'id'            => array('filter' => FILTER_VALIDATE_REGEXP, 'options' => array('regexp' => '~^-?[0-9]+$~ui')),			'alias'         => array('filter' => FILTER_VALIDATE_REGEXP, 'options' => array('regexp' => REGEXP_ALIAS)),			'menu_id'       => array('filter' => FILTER_VALIDATE_REGEXP, 'options' => array('regexp' => '~^[0-9]+$~ui')),			'parent'        => array('filter' => FILTER_VALIDATE_REGEXP, 'options' => array('regexp' => '~^[0-9]+$~ui')),			'caption'       => array('filter' => FILTER_VALIDATE_REGEXP, 'options' => array('regexp' => '~^[a-zA-Za-яА-Я\s0-9/\-_:.,=+!@#$%^&*()"]+$~ui')),			'page'          => array('filter' => FILTER_VALIDATE_REGEXP, 'options' => array('regexp' => REGEXP_ALIAS)),			'link'          => array('filter' => FILTER_VALIDATE_REGEXP, 'options' => array('regexp' => '~^(https?://)?[a-zA-Z0-9\-/.,=&?_]+(\?.*)?$~i')),			'picture'       => array('filter' => FILTER_VALIDATE_REGEXP, 'options' => array('regexp' => '~^[a-zA-Z0-9\-_.]+\.(jpg|jpeg|gif|png)$~ui')),			'text'          => array('filter' => FILTER_VALIDATE_REGEXP, 'options' => array('regexp' => '~^[a-zA-Za-яА-Я\s0-9\-_:.,=+!@#$%^&*()<>"/]+$~smui')),			'style_content' => array('filter' => FILTER_VALIDATE_REGEXP, 'options' => array('regexp' => '~^(([a-zA-Z\-]+\s*:\s*[a-zA-Z0-9\-;%\s]+)+|[a-zA-Z0-9\-_.]+\.css)$~ui')),			'style_item'    => array('filter' => FILTER_VALIDATE_REGEXP, 'options' => array('regexp' => '~^(([a-zA-Z\-]+\s*:\s*[a-zA-Z0-9\-;%\s]+)+|[a-zA-Z0-9\s\-_]+)$~ui')),			'add_more'      => array('filter' => FILTER_VALIDATE_REGEXP, 'options' => array('regexp' => '~^[a-zA-Za-яА-Я\s0-9\-_:]+$~ui')),			'hidden'        => array('filter' => FILTER_VALIDATE_REGEXP, 'options' => array('regexp' => '~^(on|)$~ui')),			'title'         => array('filter' => FILTER_VALIDATE_REGEXP, 'options' => array('regexp' => '~^[a-zA-Z0-9а-яА-Я\s\!\@\#\$\%\^\&\*\(\)\-\=\+\,\.\?\:\№]+$~ui')),			'meta'          => array('filter' => FILTER_VALIDATE_REGEXP, 'options' => array('regexp' => '~^.*$~smui'))		);		$R = get_filtered_input($input_filter);		// try to find menu ID if not set		if (($R['menu_id'] == '') && ($R['id']>'')) {			$R['menu_id'] = $DB->querySingle('select menu_id from `'.$this->CONFIG['table_menu'].'` where id=\''.$R['id'].'\'');		}		// set redirect target		$redirect_target = './?module=menu&action=manage&menu_id='.$R['menu_id'];				// no special redirect by default		$redirect_status = false;		if (((@$_POST['module'] == 'menu') || (@$_GET['module'] == 'menu')) && user_allowed_to('manage menu')) {						// check & sure if "action" parameter is set and set once only			switch (@$_POST['action'].@$_GET['action']) {							// yeah, just an updating				case 'update':					$menu_id = ($R['menu_id'] > '' ? $R['menu_id'] : '0');										// pull existing values to replace incorrect input					$q = $DB->query('select menu_id, parent_id, caption, page, link, ordermark, alias, text, picture, style_content, style_item, hidden, title, meta from `'.$this->CONFIG['table_menu'].'` where id='.$R['id']);					if ($current = $q->fetch(PDO::FETCH_ASSOC)) {						foreach($current as $index=>$value) {							if (                                                     // заменяем входное значение на имеющееся, если:								isset($R[$index]) &&                                 // входное поле есть в базе								($R[$index] == '') &&                                // И в отфильтрованном значении пусто								((@$_POST[$index] > '') || (@$_GET[$index] > '')) && // И в запросе НЕ пусто								($value > '')                                        // И в базе НЕ пусто								) {								$R[$index] = $value;							}						}					}										$new_ordermark = $DB->querySingle('select ifnull(max(ordermark),0)+1 from `'.$this->CONFIG['table_menu'].'`');					$is_hidden = ($R['hidden'] > '' ? 1 : 0);										// choose pthe proper SQL					$sql_insert =						'insert into `'.$this->CONFIG['table_menu'].'` '.						'(menu_id, parent_id, caption,  page,     link,     ordermark, alias,    text,     picture,   style_content, style_item, hidden, title,     meta      ) '.						'values '.						'(%2$s,    %3$s,      \'%4$s\', \'%5$s\', \'%6$s\', %7$s,      \'%8$s\', \'%9$s\', \'%10$s\', \'%11$s\',     \'%12$s\',  %13$s,  \'%14$s\', \'%15$s\' )';					$sql_update = 'update `'.$this->CONFIG['table_menu'].'` set parent_id=%3$s, caption=\'%4$s\', page=\'%5$s\', link=\'%6$s\', alias=\'%8$s\', text=\'%9$s\', picture=\'%10$s\', style_content=\'%11$s\', style_item=\'%12$s\', hidden=%13$s, title=\'%14$s\', meta=\'%15$s\' where id=%1$s';										$sql = $R['id'] == -1 ? $sql_insert : $sql_update;					// make caption equal to title if not set\					if ($R['caption'] == '') {						if ($R['title'] > '') {							$R['caption'] = $R['title'];						} else {							$R['caption'] = $DB->querySingle('select title from `'.DB_TABLE_PAGES.'` where alias = \''.$R['link'].'\'');						}					}					// go!					$sql = sprintf($sql, $R['id'], $menu_id, $R['parent'], $R['caption'], $R['page'], $R['link'], $new_ordermark, $R['alias'], $R['text'], $R['picture'], $R['style_content'], $R['style_item'], $is_hidden, $R['title'], $R['meta']);					$DB->query($sql);					$redirect_status = true;					break;									// move the upper				case 'moveup':					$redirect_status = true;					// current order-mark					$current = $DB->querySingle('select ordermark from `'.$this->CONFIG['table_menu'].'` where id='.$R['id']);										// maximal previous (not sure that uninterrupted numeric row there)...					$prev_order = $DB->querySingle('select max(ordermark) from `'.$this->CONFIG['table_menu'].'` where ordermark<'.$current.' and parent_id=(select parent_id from `'.$this->CONFIG['table_menu'].'` where id='.$R['id'].') and menu_id=(select menu_id from `'.$this->CONFIG['table_menu'].'` where id='.$R['id'].')');					if ($prev_order == '') { // nowhere to move, get it out						break;					}					// and its ID					$prev_id = $DB->querySingle('select id from `'.$this->CONFIG['table_menu'].'` where ordermark = '.$prev_order);										// swap them					$DB->query('update `'.$this->CONFIG['table_menu'].'` set ordermark='.$prev_order.' where id='.$R['id']);					$DB->query('update `'.$this->CONFIG['table_menu'].'` set ordermark='.$current.' where id='.$prev_id);										break;									// movibg down				case 'movedown':					$redirect_status = true;										// current order					$current = $DB->querySingle('select ordermark from `'.$this->CONFIG['table_menu'].'` where id='.$R['id']);					// minimal next					$next_order = $DB->querySingle('select min(ordermark) from `'.$this->CONFIG['table_menu'].'` where ordermark>'.$current.' and parent_id=(select parent_id from `'.$this->CONFIG['table_menu'].'` where id='.$R['id'].') and menu_id=(select menu_id from `'.$this->CONFIG['table_menu'].'` where id='.$R['id'].')');					if ($next_order == '') { // no next element, cancel moving						break;					}					// minimal's ID					$next_id = $DB->querySingle('select id from `'.$this->CONFIG['table_menu'].'` where ordermark = '.$next_order);					// swap					$DB->query('update `'.$this->CONFIG['table_menu'].'` set ordermark='.$next_order.' where id='.$R['id']);					$DB->query('update `'.$this->CONFIG['table_menu'].'` set ordermark='.$current.' where id='.$next_id);										break;				// deleting the item				case 'delete':					$DB->query('delete from `'.$this->CONFIG['table_menu'].'` where id='.$R['id']);					$redirect_status = true;					break;				// adding the item				case 'add_menu':					$DB->query('insert into `'.$this->CONFIG['table_menus'].'` (caption) values (\''.$R['add_more'].'\')');					$redirect_status = true;					break;			}		}					if ($redirect_status) {			header('Location: '.$redirect_target);			terminate();		}		return $template;	}	/**	 *	 */	function contentGenerator($template) {		$DB = Registry::Get('db');		global $USERFILES_DIRS;				// sometimes page content should look as a list too (catalog version)		// check requested "p_id" and look up in the base, if alias found - generate catalog content		$input_filter = array(			'p_id'    => array('filter' => FILTER_VALIDATE_REGEXP, 'options' => array('regexp' => REGEXP_ALIAS))		);		$R = filter_var_array($_GET, $input_filter);		if ($R['p_id'] > '') {			$id = -1;			// look up in the separate items			$q = $DB->query('select * from `'.$this->CONFIG['table_menu'].'` where alias=\''.$R['p_id'].'\'');			if ($row = $q->fetch(PDO::FETCH_ASSOC)) {				$menu_id = $row['menu_id'];				$id = $row['id'];				$global_css = $DB->querySingle('select css from `'.$this->CONFIG['table_menus'].'` where id=(select menu_id from `'.$this->CONFIG['table_menu'].'` where id='.$row['id'].')');				$css_content = $row['style_content'];				$caption = $row['caption'];				$title = ($row['title'] ? $row['title'] : $row['caption']);				$meta = $row['meta'];			} else { // not found, check entire menus				$q = $DB->query('select * from `'.$this->CONFIG['table_menus'].'` where alias=\''.$R['p_id'].'\'');				if ($row = $q->fetch(PDO::FETCH_ASSOC)) {					$id = 0;					$menu_id = $row['id'];					$global_css = $row['css'];					$css_content = '';					$caption = $row['caption'];					$title = ($row['title'] ? $row['title'] : $row['caption']);					$meta = $row['meta'];				}			}					if ($id >= 0) {							// generate content				$html = $this->generateMenuAsList($id, $menu_id);				$template = preg_replace('~<template\s[^>]*?type="content"[^/>]*(/>|>.*?</template>)~', $html, $template);								// replace "title" template				$template = preg_replace('~<template\s[^>]*?type="page_title"[^/>]*(/>|>.*?</template>)~', $title, $template);								// CSS, if specified				if (trim($global_css) > '') {					$template = add_CSS($template, $USERFILES_DIRS['css']['dir'].$global_css);				}				if (trim($css_content) > '') {					$template = add_CSS($template, $USERFILES_DIRS['css']['dir'].$css_content);				}				// add meta. if only letter and digits, make "keywords" meta (!copy-paste detected!)				if (preg_match('~^[a-zA-Zа-яА-Я0-9,.\-\s]+$~ui', $meta, $match)) {					$template = add_meta($template, 'name', 'keywords', $match[0]);				} elseif (preg_match_all('~(\(([a-zA-Z\-]*)\|([a-zA-Z\-0-9]+)\|([a-zA-Z\-0-9а-яА-Я.,;:\s+=!@#$%^&*\(\)]*)\))~smui', $meta, $matches)) { // не прокатило, попробуем структуру со скобками и пайпами					for ($i = 0; $i < count($matches[0]); $i++) {						$template = add_meta($template, $matches[2][$i], $matches[3][$i], $matches[4][$i]);					}				} elseif (preg_match_all('~<[a-zA-Z]+\s[^<>]+>~smui', $meta, $matches)) { // check if raw tags there					for ($i = 0; $i < count($matches[0]); $i++) {						$template = str_insert_before('</head>', $matches[0][$i].PHP_EOL, $template);					}				}							}		}		// add navigator (breadcrumbs)		// generate only if requested page ID is in any menu		$q = $DB->query('select id, menu_id from `'.$this->CONFIG['table_menu'].'` where alias=\''.$R['p_id'].'\' or link=\''.$R['p_id'].'\'');		while ($row = $q->fetch(PDO::FETCH_ASSOC)) {			// заменяем только на тех позициях, где указан alias меню и только те меню, которые его имеют			if (($alias = $DB->querySingle('select alias from `'.$this->CONFIG['table_menus'].'` where id=\''.$row['menu_id'].'\'')) > '') {				$template = preg_replace('~<template\s[^>]*?type="navigator"[^/>]*?menu="'.$alias.'"[^>]*?(/>|>.*?</template>)~', $this->generateNavigator($row['id'], $row['menu_id']), $template);			}		}		// template to find replace		$placeholder = '~<template\s[^>]*?type="menu"[^/>]*(/>|>.*?</template>)~';				// replace all templates to generated content		while (preg_match($placeholder, $template, $match) > 0) {						// parse template parameters into array			$menu_params = parse_plugin_template($match[0]);			// generate menu HTML			$menu_html = $this->buildMenuAsUL(isset($menu_params['id']) ? $menu_params['id'] : 0);			// replace it			$template = preg_replace($placeholder, $menu_html, $template, 1);		}		// yeah we are ready		return $template;	}	/**	 *	 */	function AJAXHandler() {		$DB = Registry::Get('db');		// фильтруем вход		$input_filter = array(			'id'         => array('filter' => FILTER_VALIDATE_REGEXP, 'options' => array('regexp' => '~^-?[0-9]+$~ui')),			'alias'      => array('filter' => FILTER_VALIDATE_REGEXP, 'options' => array('regexp' => REGEXP_ALIAS)),			'menu_id'    => array('filter' => FILTER_VALIDATE_REGEXP, 'options' => array('regexp' => '~^[0-9]+$~ui')),			'action'     => array('filter' => FILTER_VALIDATE_REGEXP, 'options' => array('regexp' => '~^[a-zA-Z0-9\_\-]+$~ui'))					);		$R = get_filtered_input($input_filter);		// ответ по умолчанию		$response = 'unknown function';		switch ($R['action']) {					// содержимое диалога редактирования/добавления ///////////////////////////////////////////			case 'edit_elem':				// элемент, который редактировать будем (-1, если новый)				if (($elem_id = $R['id']) == '') {					return 'bad ID';				}						// вытаскиваем инфу о пункте меню				$item_data = $DB->query('select caption, parent_id, page, link, menu_id, alias, text, picture, style_content, style_item, hidden, title, meta from `'.$this->CONFIG['table_menu'].'` where id='.$elem_id);				$row = $item_data->fetch(PDO::FETCH_ASSOC);				$elem_list = $this->getElemListAsSelect($row['parent_id'], ($row['menu_id'] > 0 ? $row['menu_id'] : ($R['menu_id'] ? $R['menu_id'] : 0) ));				$pages_list = $this->getPagesListAsSelect($row['page'], 'page', $DB);				$hidden_checked = ($row['hidden']> '0' ? 'checked="checked"' : '');				$response = MODULE_MENU_ELEM_EDIT_TABLE;				$response = str_replace('%menu_id%',       $R['menu_id'],                     $response);				$response = str_replace('%elem_id%',       $elem_id,                          $response);				$response = str_replace('%caption%',       htmlspecialchars($row['caption']), $response);				$response = str_replace('%alias%',         $row['alias'],                     $response);				$response = str_replace('%elem_list%',     $elem_list,                        $response);				$response = str_replace('%pages_list%',    $pages_list,                       $response);				$response = str_replace('%link%',          $row['link'],                      $response);				$response = str_replace('%text%',          $row['text'],                      $response);				$response = str_replace('%picture%',       $row['picture'],                   $response);				$response = str_replace('%style_content%', $row['style_content'],             $response);				$response = str_replace('%style_item%',    $row['style_item'],                $response);				$response = str_replace('%hidden%',        $hidden_checked,                   $response);				$response = str_replace('%title%',         $row['title'],                     $response);				$response = str_replace('%meta%',          $row['meta'],                      $response);								break;			}		return $response;	}	/**	 *	 */	function adminGenerator() {		$DB = Registry::Get('db');				$menu_id = @$_GET['menu_id'] ? $_GET['menu_id'] : 0;		// шаблон контролов на каждой строке		$controls = MODULE_MENU_ADMIN_AT_ROW_CONTROLS;		$controls = str_replace('%menu_id%', $menu_id, $controls);		// получаем меню в виде UL->LI, к каждому пункту допишем небольшой плейсхолдер, который потом хитро заменим		// не можем заменить сразу на $controls, потому что сборщик превратит теги в сущности		$menu = $this->buildMenuAsUL($menu_id, array('append_text' => '@ID=%id%@', 'hidden_color'=>'red'));		// убираем все ссылки в меню (до замены плейсхолдеров, иначе те ссылки тоже исчезнут)		$menu = preg_replace('~</?a.*?>~ui', '', $menu);		// заменяем плейсхолдеры ID на html контролов, при замене текст "$1" в $controls заменится на соответственный ID		$menu = preg_replace('~@ID=([0-9]+)@~', $controls, $menu);		// список менюшек для кнопок сверху		$q = $DB->query('select id, caption from '.$this->CONFIG['table_menus'].' order by id');		$menu_list = '';		while ($row = $q->fetch(PDO::FETCH_ASSOC)) {			$menu_list .= '<option value="'.$row['id'].'"'.($menu_id == $row['id'] ? ' selected="selected"' :'').'>'.$row['caption'].'</option>';		}		// собираем общий HTML страницы управления		$response = MODULE_MENU_ADMIN_ENTIRE_CONTENT;		$response = str_replace('%menu_id%', $menu_id, $response);		$response = str_replace('%menu_list%', $menu_list, $response);		$response = str_replace('%menu_tree%', $menu, $response);						return $response;	}		/**	 * Generates navigator (aka breadcrumbs)	 *	 * @param int $id element ID to trace to	 * @param int $menu_id menu containing element	 * @return navigator HTML	 */	private function generateNavigator($id, $menu_id = 0) {				$DB = Registry::Get('db');		// will combine HTML here		$navigator = '';				// ok, start with it		$current_id = $id;		// should we use a special template for the current section		$use_special_for_current_category = true;		// combine, backwards order		while (true) {			$query = $DB->query('select alias, caption, parent_id from '.$this->CONFIG['table_menu'].' where id='.$current_id); // берем вышестоящий элемент			$row = $query->fetch(PDO::FETCH_ASSOC);			$navigator =				sprintf(					($use_special_for_current_category ? MODULE_MENU_NAVIGATOR_ITEM_SELECTED : MODULE_MENU_NAVIGATOR_ITEM)					, $row['alias'], $row['caption'])				.$navigator;						$use_special_for_current_category = false;			if (($current_id = $row['parent_id']) == 0) {				break;			}		}		// place menu caption and main page link at start		$q = $DB->query('select caption, alias from '.$this->CONFIG['table_menus'].' where id=(select menu_id from '.$this->CONFIG['table_menu'].' where id='.$id.')');		if ($menu_info = $q->fetch(PDO::FETCH_ASSOC)) {			$navigator = sprintf(MODULE_MENU_NAVIGATOR_ITEM, $menu_info['alias'], $menu_info['caption']).$navigator;		}		// ready, wrap and return		return sprintf(MODULE_MENU_NAVIGATOR_WRAPPER, $navigator);	}		/**	 * Creates list of elements, each wrapped with some special HTML	 *	 * @param int $id element ID to trace to	 * @param int $menu_id menu containing element	 * @return navigator HTML	 */	function generateMenuAsList($id, $menu_id = 0) {		$DB = Registry::Get('db');		global $USERFILES_DIRS;		$html = '';				// common menu info (required by XSLs)		$menu_info_query = $DB->query('select * from '.$this->CONFIG['table_menus'].' where id=\''.$menu_id.'\'');		$menu_info = $menu_info_query->fetch(PDO::FETCH_ASSOC);				// if category has comment text, place if before the list		if (($text = $DB->querySingle('select text from '.$this->CONFIG['table_menu'].' where id='.$id)) > '') {			$html .= sprintf(MODULE_MENU_CATEGORY_TEXT_WRAPPER, $text);		}		// ok, now create the list itself		$query = $DB->query('select * from '.$this->CONFIG['table_menu'].' where ifnull(hidden,0)=0 and parent_id='.$id.' and menu_id='.$menu_id);		while ($row = $query->fetch(PDO::FETCH_ASSOC)) {			// if element has a link, use another wrapper template			if ($row['link'] > '') {				$more = file_get_contents(__DIR__.'/templates/'.$menu_info['template_short']);			} else {				$more = file_get_contents(__DIR__.'/templates/'.$menu_info['template_group']);			}			foreach ($row as $index=>$value) {								// add relative path to images				if ($index == 'picture') $value = $USERFILES_DIRS['images']['dir'].$value;								// if element is not a link then it is a category top so add alias				if (($index == 'link') && ($value == '')) $value = $row['alias'];				$more = str_replace('%'.$index.'%', $value, $more);			}			$html .= PHP_EOL.$more;					}		// wrap in common HTML, depending on level		if ($id == 0) { 			$html = sprintf(MODULE_MENU_TOP_LEVEL_WRAPPER, $html);		} else {			$html = sprintf(MODULE_MENU_OTHER_LEVEL_WRAPPER, $html);		}		return $html;	}		/**	 * Creates element list as HTML SELECT tag	 *	 * @param int $id element ID to trace to	 * @param int $menu_id menu containing element	 * @return navigator HTML	 */	function getElemListAsSelect($current_id = '', $menu_id = 0) {		$DB = Registry::Get('db');				$q = $DB->query('select id, caption from '.$this->CONFIG['table_menu'].' where menu_id='.$menu_id);		$select_elems = '';		while ($row = $q->fetch(PDO::FETCH_ASSOC)) {			$select_elems .= sprintf(MODULE_MENU_ADMIN_ELEM_LIST_OPTION, $row['id'], ($row['id'] == $current_id ? ' selected="selected" ' : ''), $row['caption']);		}		$select_elems = sprintf(MODULE_MENU_ADMIN_ELEM_LIST_WRAPPER, $select_elems);		return $select_elems;	}		/**	 * Creates list of all pages and catalog elements (menu elements with sub-items)	 * as HTML SELECT	 *	 * @param string $current_alias forces this alias to have "selected" attribute	 * @param string $set_name HTML "name" attribute for the element	 * @param resource $DB database link	 * @return list HTML	 */	function getPagesListAsSelect($current_alias = '', $set_name = 'page', $DB) {		$select_pages = '';		// pages		if (class_exists('J_Content')) {						// get pages table from the content module if set, elsewhere use self config			$pages_table = J_Content::getConfig('table', $this->CONFIG['content_module_table']);			$select_pages .= sprintf(MODULE_MENU_ADMIN_LINK_LIST_OPTION, '', 'select_divider', '', 'User pages');			$q = $DB->query('select alias, title from '.$pages_table.' order by title');			while ($row = $q->fetch(PDO::FETCH_ASSOC)) {				$select_pages .= sprintf(MODULE_MENU_ADMIN_LINK_LIST_OPTION, $row['alias'], '', ($row['alias'] == $current_alias ? ' selected="selected" ' : ''), $row['title'].' ('.$row['alias'].')');			}		}		// catalogs (menu elements)		$select_pages .= sprintf(MODULE_MENU_ADMIN_LINK_LIST_OPTION, '', 'select_divider', '', 'Catalog pages');		$q = $DB->query('select alias, caption from '.$this->CONFIG['table_menu'].' where alias> \'\' order by caption');		while ($row = $q->fetch(PDO::FETCH_ASSOC)) {			$select_pages .= sprintf(MODULE_MENU_ADMIN_LINK_LIST_OPTION, $row['alias'], '', ($row['alias'] == $current_alias ? ' selected="selected" ' : ''), $row['caption'].' ('.$row['alias'].')');		}		$select_pages = sprintf(MODULE_MENU_ADMIN_LINK_LIST_WRAPPER, $set_name, $select_pages);		return $select_pages;	}	/**	 * Shorthand - generates menu element ID for using in HTML (as it shouldn't start	 * with digit and intersect with other menus)	 *	 * @param int $menu_id menu ID	 * @param string $alias menu element alias	 * @return HTML-friendly ID	 */	function getFullElementId($menu_id, $alias) {		return 'menu_'.$menu_id.'_'.$alias;	}	/**	 * generates all menu as <UL>-<LI> structure	 *	 * options available:	 * append_text - any text to append to each item (text only, HTML code will be converted to entities)	 * hidden_color - show hidden items as red (will not be shown if not specified)	 *	 * @param int $menu_id menu ID to build	 * @param array $options building options	 *	 */	function buildMenuAsUL($menu_id, $options = array()) {		$DB = Registry::Get('db');			// get alements. note that ORDER BY is required here due to algorythm		$sql = "select menu.*, ifnull(c.childcount,0) as childcount from {$this->CONFIG['table_menu']} left join (select parent_id, count(*) as childcount from {$this->CONFIG['table_menu']} group by parent_id) c on c.parent_id = menu.id where menu_id = $menu_id order by menu.parent_id, menu.ordermark";				// TAG_TODO the folowing lines should be completely rewritten		//		$statement = $DB->prepare($sql, array(PDO::ATTR_CURSOR => PDO::CURSOR_SCROLL));//		$q = $statement->execute(array(':menu_id'=>$menu_id));				$q = $DB->query($sql);		if (!($row = $q->fetch(PDO::FETCH_ASSOC, PDO::FETCH_ORI_FIRST, -1))) {			return '<b>[JuliaCMS] warning:</b> no menu with this ID ('.$menu_id.') or no items';		}		// don't forget to rewind (fetch will consume one result row)		// $q->reset();		$q = $DB->query($sql);								// start menu as DOM structure		$DOM = new DOMDocument('1.0', 'utf-8');		$DOM->formatOutput = false;				// start with <ROOT>		$root = $DOM->createElement('root');		$root->setAttribute('id', $this->getFullElementId($menu_id, 0));		$root->setIdAttribute('id', true);		$DOM->appendChild($root);		// fetch all elements into array		$all_elems = array();		while ($row = $q->fetch(PDO::FETCH_ASSOC)) {			$all_elems[$row['id']] = $row;		}		// start adding all elements		foreach ($all_elems	as $row) {			if ($row['hidden'] && !isset($options['hidden_color'])) {				continue;			}			// look up for parent. if parent exists, get alias (if set) or ID			$parent_id = 0;			if (isset($all_elems[$row['parent_id']])) {				$parent_id = $all_elems[$row['parent_id']]['alias']>'' ? $all_elems[$row['parent_id']]['alias'] : $all_elems[$row['parent_id']]['id'];			}			// find node to append. if it doesn't not exists in the structure, menu data corrupted or parent id hidden			if ($parent_node = $DOM->getElementByID($this->getFullElementId($menu_id,  $parent_id))) {				// check if parent has <UL> sub-node				$parent_ul = null;				foreach ($parent_node->childNodes as $child_node) {					if ($child_node->nodeName == 'ul') { // yeah will attach here						$parent_ul = $child_node;						break;					}				}				// add one if not found				if ($parent_ul === null) {					$parent_ul = $DOM->createElement('ul');					$parent_node->appendChild($parent_ul);				}								// create and append <LI> element				$li = $DOM->createElement('li');				$li->setAttribute('id', $this->getFullElementId($menu_id, $row['id']));				$li->setIdAttribute('id', true);				$parent_ul->appendChild($li);								// add <A> into <LI>				$a = $DOM->createElement('a');				if (trim($row['page']) > '') {					$a->setAttribute('href', sprintf(MODULE_MENU_PAGE_TEMPLATE, trim($row['page'])));				} elseif (trim($row['link']) > '') {					$a->setAttribute('href', sprintf(MODULE_MENU_LINK_TEMPLATE, trim($row['link'])));				}								// add style (as "style" or "class", depending on value: if colon presents, the value is raw style, css class otherwise)				if (trim($row['style_item']) > '') {					if (strpos($row['style_item'], ':') > 0) {						$a->setAttribute('style', $row['style_item']);					} else {						$a->setAttribute('class', $row['style_item']);					}				}				$li->appendChild($a);								// ... append item text as <SPAN>				$a->appendChild($span = $DOM->createElement('span'));								// mark gray if no link AND no children				if (($row['page'] == '') && ($row['link'] == '') && ($row['childcount'] == '')) {					$span->setAttribute('style', 'color: #bbb;');				}				// mark hidden elements red				if ($row['hidden']) {					$span->setAttribute('style', 'color: '.($options['hidden_color'] ? $options['hidden_color'] : 'red'));				}								// add text				$text = $row['caption'].(isset($options['append_text'])?$options['append_text']:'');								// process pseudo-templates				$text = str_ireplace('%id%', $row['id'], $text);								// and finally add to DOM structure				$span->appendChild($DOM->createTextNode($text));			}		}		// well, now write as HTML and extract <ROOT> inner content		preg_match('~<root.*?>(.*)</root>~smui', $DOM->saveXML(), $matches);		return $matches[1];	}	}?>