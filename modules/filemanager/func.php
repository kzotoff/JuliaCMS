<?phprequire_once(__DIR__.'/html.php');class J_Filemanager extends JuliaCMSModule {/* функция обработки ввода */	function requestParser($template) {		global $USERFILES_DIRS;		$module_name = 'filemanager';				if (!user_allowed_to('modify files')) {			return $template;			}		// поверим, есть ли вообще для модуля что обработать		if ((@$_GET['module'] != $module_name) && (@$_POST['module'] != $module_name)) {			return $template;		}		// подключаем БД		global $DB;		// фильтруем вход, чтобы всегда были корректные значения, заодно защищаемся от инъекций		// набор для обработки. в общем случае - регулярки для каждого требуемого параметра запроса		$input_filter = array(			'action'       => array('filter' => FILTER_VALIDATE_REGEXP, 'options' => array('regexp' => '~^(update_file|upload|delete)$~ui')),			'category'     => array('filter' => FILTER_VALIDATE_REGEXP, 'options' => array('regexp' => REGEXP_ALIAS)),			'filename'     => array('filter' => FILTER_VALIDATE_REGEXP, 'options' => array('regexp' => '~^(?!(\.\.|\|//|[a-zA-Z]:)).*$~')),			'new_filename' => array('filter' => FILTER_VALIDATE_REGEXP, 'options' => array('regexp' => '~^(?!(\.\.|\|//|[a-zA-Z]:)).*$~')),			'filecontent'  => array('filter' => FILTER_VALIDATE_REGEXP, 'options' => array('regexp' => '~.*~'))		);				$R = get_filtered_input($input_filter);				// в некоторых ситуациях потребуется прервать дальнейшую обработку и перенаправить на обработку снова (см. текст в начале скрипта)		$redirect_target = './?module='.$module_name.'&action=manage&category='.$R['category'];		$redirect_status = false;		switch (@$R['action']) {			case 'upload':				for ($i = 0; $i < count($_FILES['files']['name']); $i++) {					// проверяем, соответствует ли расширение файла выбранной категории, если да - загружаем					$dir = getUserFolderParams($_FILES['files']['name'][$i]);					if ($dir == $USERFILES_DIRS[$R['category']]) {						move_uploaded_file($_FILES['files']['tmp_name'][$i], $dir['dir'].$_FILES['files']['name'][$i]);					}				}				$redirect_status = true;				break;			case 'delete':				if ($dir = getUserFolderParams($R['filename'])) {					unlink($R['filename']);				}				$redirect_status = true;				break;			case 'update_file':				// проверяем, нормально ли местоположение файла				if (!($dir = getUserFolderParams($R['filename'])) ||					!($dir = getUserFolderParams($R['new_filename']))					) {					echo 'SEARCH:SOURCES:FOR:THIS:CODE:UPDATE'; print_r($R); terminate();					return $template;				}				// сохраняем содержимое				file_put_contents($R['filename'], $R['filecontent']);								// переименовываем, если требуется				if ($R['filename'] != $R['new_filename']) {					rename($R['filename'], $R['new_filename']);				}				$redirect_status = true;				break;		}		// проверяем статус перенаправления		if ($redirect_status) {			header('Location: '.$redirect_target);			terminate();		}		return $template;	}	function AJAXHandler() {		global $USERFILES_DIRS;		$response = 'bad request';				switch ($_GET['action']) {				case 'edit_elem':				// хорош ли запрос?				if (!isset($_GET['file'])) {					return $response;				}				$filename = $_GET['file'];				// проверим сначала, соответствует ли файл каталогу, в котором запрошен				if (!($alias = array_search(getUserFolderParams($filename), $USERFILES_DIRS))) {					return $response;				}				// некоторые типы редактировать нельзя				if (in_array($alias, array('files', 'images'))) {					return 'not editable content';				}				$content = file_get_contents($filename);				$response = MODULE_FILEMANAGER_HTML_EDIT_CONTENT_FORM;				$response = str_replace('%category%', $alias, $response);				$response = str_replace('%content%', $content, $response);				$response = str_replace('%filename%', $filename, $response);					break;		}		echo $response;	}	function adminGenerator() {		global $USERFILES_DIRS;		$html = MODULE_FILEMANAGER_HTML_ENTIRE_WRAPPER;		$r = array_keys($USERFILES_DIRS);		$category = $r[0];		if (isset($_GET['category']) && ($_GET['category'] > '')) {			$category = $_GET['category'];		}		// список папочек, которые обслуживаем		$replace = '';		foreach($USERFILES_DIRS as $alias => $dir) {			$replace .= '<option value="'.$alias.'"'.($alias == $category ? ' selected="selected"' : '').'>'.$dir['caption'].'</option>';		}		$html = preg_replace('~<template[^>]*type="filemanager_dir_list"[^>]*>~', $replace, $html);		// если выбрана конкретная папочка, ее содержимое тоже выведем		$replace = '';		$dir = $USERFILES_DIRS[$category];		if (file_exists($dir['dir'])) {                                                                    // проверим на существование			$d = scandir($dir['dir']);			foreach ($d as $filename) {				if (preg_match($dir['regexp_filename'], $filename) > 0) { // оставляем в списке только подходящие файлы					$add = MODULE_FILEMANAGER_HTML_SINGLE_FILE_ROW;					$add = str_replace('%category%', $category, $add);					$add = str_replace('%filename%', $filename, $add);					$add = str_replace('%path%', $dir['dir'].$filename, $add);					$replace .= $add;				}			}		} else {			$replace = '<tr><td>directory not exists!</td></tr>';		}		$html = str_replace('%category%', $category, $html);		$html = preg_replace('~<template[^>]*type="filemanager_table_rows"[^>]*>~', $replace, $html);				return $html;			}	private function getUserFolderParams($filename) {		global $USERFILES_DIRS;		foreach ($USERFILES_DIRS as $dir) {			if (preg_match($dir['regexp_full'], $filename) || preg_match($dir['regexp_filename'], $filename)) {				return $dir;			}		}		return false;	}	}?>